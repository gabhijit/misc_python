#
# A simple script to 'extract' IR data from JPEG files generated by FLIR
# Cameras
#
# See LICENSE for copying and other information
#
# Copyright (C) 2019- Abhijit Gadgil
#
# References -
# https://github.com/map222/MPNeuro/tree/master/mouse_tail_gui`
# http://u88.n24.queensu.ca/exiftool/forum/index.php/topic,4898.msg23944.html#msg23944
#
#

import math
import imageio
import subprocess
import os
import sys

_ = '''

Kelvin = 273.15

# Following data was obtained by running exiftool -flir:All on the Image file
Planck_R1 = 16526.467
Planck_B = 1422.3
Planck_F = 1.25
Planck_O = -3349
Planck_R2 = 0.073892675
T_Reflect = 26.0 + Kelvin
Emissivity = 0.95


# Following formulae were obtained from the following pages -
# http://u88.n24.queensu.ca/exiftool/forum/index.php/topic,4898.msg23944.html#msg23944

Raw_Reflect = Planck_R1 / (Planck_R2 * (math.e**(Planck_B / T_Reflect) - Planck_F)) - Planck_O
print (Raw_Reflect)

def get_raw_obj(pixel):
    return (pixel - (1 - Emissivity) * Raw_Reflect)/ Emissivity

def process_pixel2(pixel):
    value = Planck_B / math.log

def process_pixel(pixel):
    value = Planck_B / math.log(Planck_R1 / (Planck_R2 * (get_raw_obj(pixel) + Planck_O)) + Planck_F) - Kelvin
    return value

def process_pixel_3(pixel):
    value = Planck_B / math.log(Planck_R1 / (Planck_R2 * (pixel + Planck_O)) + Planck_F) - Kelvin
    return value

# These are some pixel values obtained from the PNG image.
#print(process_pixel(5186))
#print(process_pixel(5150))
#print(process_pixel(5523))
#print(process_pixel_3(16916))

'''

def generate_raw_thermal_image_file(input_file):
    """
    Runs the exiftool -b -RawThermalImage command inside a subprocess and generates
    embedded PNG file.
    """

    if not os.path.exists(input_file):
        return None

    outfile_basename = os.path.splitext(input_file)
    outfile_full_pathname = os.extsep.join([outfile_basename[0], 'png'])

    command = "/usr/bin/exiftool -b -RawThermalImage %s" % input_file

    print (command, outfile_full_pathname)

    with open(outfile_full_pathname, 'bw+') as outfile:
        result = subprocess.Popen(command.split(), stdout=outfile)

        result.wait()

    return outfile_full_pathname

def get_flir_data_for_image(input_file):
    """
    Runs exiftool -flir:all <input_file> and returns a dictionary containing following keys
    ['planck_r1', 'planck_b', 'planck_f', 'planck_o', 'planck_r2', 't_reflect', 'emissivity']
    """
    pass

def fixup_png_file(input_file):
    """
    It seems the Endianness of the PNG file is not correct. So we fixup this and then return the Array
    we read.
    """
    im = imageio.imread(input_file)
    im = im.astype('int16')
    im = im.byteswap('<')

    return im

def image_data_to_temp(image_data):
    """
    Takes image data (sensor reading as 16 byte integer) and outputs temperature
    in degrees celcius corresponding to each pixel.
    """

if __name__ == '__main__':

    if len(sys.argv) != 2:
        print ("Usage: python flir_process.py <flir-image.jpg>")
        sys.exit(-1)

    png_file = generate_raw_thermal_image_file(sys.argv[1])
    image_data = fixup_png_file(png_file)

    image_data_to_temp(image_data)
